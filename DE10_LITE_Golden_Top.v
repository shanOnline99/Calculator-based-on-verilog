
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_LITE_Golden_Top(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,

	//////////// Accelerometer //////////
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,

	//////////// Arduino //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================
//Adder_subtractor AS1(0,1,0,0,0,0,0,,0,SW[0],SW[1],SW[2],SW[3],SW[4],SW[5],SW[6],SW[7],o0,o1,o2,o3,o4,o5,o6,o7);
//Multplier Mp(0,0,0,0,0,1,0,0,SW[7],SW[6],SW[5],SW[4],SW[3],SW[2],SW[1],SW[0],o14,o13,o12,o11,o10,o9,o8,o7,o6,o5,o4,o3,o2,o1,o0);


in_op inop1(SW[9],SW[7],SW[6],SW[5],SW[4],SW[3],SW[2],SW[1],SW[0],O15,O14,O13,O12,O11,O10,O9,O8,O7,O6,O5,O4,O3,O2,O1,O0);

memoryblock M1(SW[8],KEY[0],KEY[1],O7,O6,O5,O4,O3,O2,O1,O0,Ao7,Ao6,Ao5,Ao4,Ao3,Ao2,Ao1,Ao0,Bo7,Bo6,Bo5,Bo4,Bo3,Bo2,Bo1,Bo0);
BCD_converter C0(O7,O6,O5,O4,O3,O2,O1,O0,OUT7,OUT6,OUT5,OUT4,OUT3,OUT2,OUT1,OUT0);

operations OP1(O8,O9,O11,O10,Ao7,Ao6,Ao5,Ao4,Ao3,Ao2,Ao1,Ao0,Bo7,Bo6,Bo5,Bo4,Bo3,Bo2,Bo1,Bo0,out7,out6,out5,out4,out3,out2,out1,out0);
BCD_converter C1(out7,out6,out5,out4,out3,out2,out1,out0,LSTOUT7,LSTOUT6,LSTOUT5,LSTOUT4,LSTOUT3,LSTOUT2,LSTOUT1,LSTOUT0);

or or1(DISOUT7,LSTOUT7,OUT7);
or or2(DISOUT6,LSTOUT6,OUT6);
or or3(DISOUT5,LSTOUT5,OUT5);
or or4(DISOUT4,LSTOUT4,OUT4);
or or5(DISOUT3,LSTOUT3,OUT3);
or or6(DISOUT2,LSTOUT2,OUT2);
or or7(DISOUT1,LSTOUT1,OUT1);
or or8(DISOUT0,LSTOUT0,OUT0);


seven_segment_display s1(DISOUT3,DISOUT2,DISOUT1,DISOUT0,HEX0[0],HEX0[1],HEX0[2],HEX0[3],HEX0[4],HEX0[5],HEX0[6],HEX0[7]);
seven_segment_display s2(DISOUT7,DISOUT6,DISOUT5,DISOUT4,HEX1[0],HEX1[1],HEX1[2],HEX1[3],HEX1[4],HEX1[5],HEX1[6],HEX1[7]);


BCD_converter C2(Ao7,Ao6,Ao5,Ao4,Ao3,Ao2,Ao1,Ao0,FOUT7,FOUT6,FOUT5,FOUT4,FOUT3,FOUT2,FOUT1,FOUT0);
BCD_converter C3(Bo7,Bo6,Bo5,Bo4,Bo3,Bo2,Bo1,Bo0,FOUT15,FOUT14,FOUT13,FOUT12,FOUT11,FOUT10,FOUT9,FOUT8);

seven_segment_display s3(FOUT3,FOUT2,FOUT1,FOUT0,HEX4[0],HEX4[1],HEX4[2],HEX4[3],HEX4[4],HEX4[5],HEX4[6],HEX4[7]);
seven_segment_display s4(FOUT7,FOUT6,FOUT5,FOUT4,HEX5[0],HEX5[1],HEX5[2],HEX5[3],HEX5[4],HEX5[5],HEX5[6],HEX5[7]);
seven_segment_display s5(FOUT11,FOUT10,FOUT9,FOUT8,HEX2[0],HEX2[1],HEX2[2],HEX2[3],HEX2[4],HEX2[5],HEX2[6],HEX2[7]);
seven_segment_display s6(FOUT15,FOUT14,FOUT13,FOUT12,HEX3[0],HEX3[1],HEX3[2],HEX3[3],HEX3[4],HEX3[5],HEX3[6],HEX3[7]);

endmodule
